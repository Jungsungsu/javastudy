
public class ex_1 {

	
	//Paradigm
	//사람들의 견해나 사고를 근본적으로 규정하는 테두리
	
	//Procedural Programming (절차적 프로그래밍)
	// c , fortran cobol
	
	//Step by Step (Process)
	
	// Object Oriented Programming (객체 지향 프로그래밍)
	// 여러 개의 독립된 단위,
	// 즉, 객체들의 모임으로 파악하고자 하는것
	// 각각의 객체는 메시지를 주고 받고 데이터를 처리
	
	//컴퓨터가 수행하는 작업을 객체들간의 상호작용으로 표현
	
	//객체 지향 특징
	//   추상화 캡슐화 상속 다형성
	
	//추상화
	//객체에서 공통된 속성과 행위를 추출하는 기법
	// 코드 상에서 구현(로직)부분을 제외한 오직 선언 부분만을 설계
	// 상세한 정보는 무시하고 필요한 정보들만 간추려서 구성
	
	// 캡슐화
	// 관련된 필드(속성)와 메소드(기능)를 하나로 묶고, 실제 구현 내용을 외부로부터 감추는 기법(정보은닉)
	// 만일의 상황(타인이 외부에서 조작)을 대비해서 특정 속성이나 메소드를 사용자가 조작할 수 없도록 숨겨 놓은것
	// 외부에서는 공개된 메소드(기능)의 인터페이스를 통해 접근할 수 있다.
	
	//상속
	//이미 작성된 클래스(상위클래스)의 특성을 그대로 잉어받아 새로운 클래스(하위클래스)를 생성하는 기법
	//기존 코드를 그대로 재사용하거나 재정의 -> 재사용+확장
	
	//다형성
	//사전적 의미 '다양한 형태로 나타날 수 있는 능력'
	//같은 기능(메소드)를 호출하더라도 객체에 따라 다르게 동작하는것
	//상위클래스의 동작을 하위클래스에서 다시 정의하여 사용하는 것 또한 다형성으로 볼 수 있다.
	
	//객체지향 프로그래밍의 장점
	//신뢰성 있는 소프트웨어를 쉽게 작성할 수 있다.
	//코드를 재사용하기 쉽다.
	// 유지보수가 용이하다.
	//직관적인 코드 분석이 가능하다
	//소프트웨어 생산성이 향상된다.
	
	// 클래스의 구조
	public class 클래스명 {
		
		//자료형  필드명1;
		//자료형  필드명2;  ->객체의 속성 정의
		
		//반환형 메소드1()
        //반환형 메소드2()
		
	
	
	}
	
	
	
}
